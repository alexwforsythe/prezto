#!/usr/bin/env zsh

#
# ~/.zshrc: executes commands at the start of an interactive session
#
# See https://github.com/zsh-users/zsh/blob/master/StartupFiles/zshrc
#

# @note Uncomment the following line to profile startup time.
# zmodload zsh/zprof

# @todo move dotfiles into a zdotdir, maybe move this back to zshenv?
# export ZDOTDIR=$HOME/.dotfiles/zdotdir

# Ensure path arrays do not contain duplicates.
typeset -gU cdpath fpath mailpath path

# @todo set up path in .profile
# Set the list of directories that Zsh searches for programs.
path=(
  $HOME/bin
  $HOME/sbin
  /usr/bin
  /usr/sbin
  /usr/local/bin
  /usr/local/sbin
  /opt/local/bin
  /opt/local/sbin
  /opt/homebrew/bin
  /opt/homebrew/sbin
  $path
)

eval $(brew shellenv)
gnubin="$HOMEBREW_PREFIX/opt/coreutils/libexec/gnubin"
[ ! -d "$gnubin" ] && brew install coreutils
path=($gnubin $path)

#
# Instant prompt
#

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
#
# Activate direnv here for compatibility:
# https://github.com/romkatv/powerlevel10k/blob/master/README.md#how-do-i-initialize-direnv-when-using-instant-prompt
#
# @note tmux sessions should be created after instant prompt because tmux
# generates output to parent process:
# https://github.com/romkatv/powerlevel10k/issues/1203
p10k_cache="${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
(( ${+commands[direnv]} )) && emulate zsh -c "$(direnv export zsh)"
[[ -r "$p10k_cache" ]] && . "$p10k_cache"
(( ${+commands[direnv]} )) && emulate zsh -c "$(direnv hook zsh)"

# Load bash profile to share environment variables, etc.
#
# zsh is usually compatible with bash profiles, but not the other way around:
# https://superuser.com/questions/187639/zsh-not-hitting-profile
#
# @todo move to XDG_CONFIG_HOME/.profile
if [[ ! -r $HOME/.profile ]] || ! . $HOME/.profile ; then
  printf '[error] %s\n' "file not loaded: $HOME/.profile"
  return 1
fi
log:debug "file loaded: $HOME/.profile"

#
# Pre-plugin Setup
#

# Enable cdr for use with zsh-autocomplete:
# https://github.com/marlonrichert/zsh-autocomplete/issues/432
autoload -Uz cdr

# Use fuzzy searching for history substring search
export HISTORY_SUBSTRING_SEARCH_FUZZY=1

# Homebrew completions
if [[ -n $HOMEBREW_PREFIX ]]; then
  # Register homebrew completions so they'll be loaded by the completion plugin.
  # @todo this should be done by the completion plugin, maybe try updating it?
  # @todo I needed to run these commands to fix zcompinit security issues from
  # docker completions:
  # compaudit | xargs chown -R $(whoami)
  # compaudit | xargs chmod go-w
  fpath+=$HOMEBREW_PREFIX/share/zsh/site-functions

  # Rename bash completions for git so the completion plugin loads its own
  # (better) ones instead:
  # https://stackoverflow.com/questions/65833258/git-completion-on-zsh-not-listing-ambiguous-options-on-macos
  brew_completions_dir="$HOMEBREW_PREFIX/share/zsh/site-functions"
  bash_completions_git="$brew_completions_dir/_git"
  if [[ -f $bash_completions_git ]]; then
    mv $bash_completions_git "$brew_completions_dir/git_renamed"
  fi
fi

# Load bash completions because there might be some that zsh doesn't have. We
# load these before prezto so the completion plugin will override any
# conflicting definitions, because zsh completions are usually better.
if ! autoload -Uz bashcompinit || ! bashcompinit; then
  log:warn "failed to load bash completions"
fi

# zsh-autocomplete: this config must be set before loading the plugin and cannot
# be changed at runtime.
zstyle ':autocomplete:*' widget-style menu-select
# complete-word: (Shift-)Tab inserts the top (bottom) completion.
# menu-complete: Press again to cycle to next (previous) completion.
# menu-select:   Same as `menu-complete`, but updates selection in menu.

#
# Plugins
#

source:file "$XDG_CONFIG_HOME/dotfiles/submodules/prezto/init.zsh"
# Load p10k immediately after plugins for a fast prompt.
# https://github.com/romkatv/zsh-bench
source:file $XDG_CONFIG_HOME/dotfiles/configs/p10k.zsh
source:file $XDG_CONFIG_HOME/dotfiles/configs/shellrc.sh
eval:if-cmd zoxide zoxide init zsh

# fzf
#
# https://thevaluable.dev/fzf-shell-integration/

source:file "$FZF_DIR/shell/completion.zsh"
source:file "$FZF_DIR/shell/key-bindings.zsh"
source:file $XDG_CONFIG_HOME/dotfiles/configs/fzf-tab-rc.zsh

# zsh-autocomplete

source:file $XDG_CONFIG_HOME/dotfiles/configs/zsh-autocomplete-rc.zsh

#
# Completions
#

# Only show completions for exact matches.
unsetopt completeinword

# Override the match (ma) color to be more subtle--fg white, bg gray, bold--to
# match our fzf theme.
zstyle ':completion:*' list-colors "ma=38;5;251;48;5;237;1"

#
# Key bindings
#

# @todo
#  - history substring search
#   - up/down line
#   - accept
#   - accept and enter

# Remove mode switching delay for vicmd and viins.
export KEYTIMEOUT=1

# Set cursor mode based on the current keymap.
#
# See:
#  - https://thevaluable.dev/zsh-install-configure-mouseless/
#  - https://unix.stackexchange.com/questions/547/make-my-zsh-prompt-show-mode-in-vi-mode
#
# For cursor shapes, see:
# https://ttssh2.osdn.jp/manual/4/en/usage/tips/vim.html
set-cursor-mode() {
    case $KEYMAP in
      vicmd) echo -ne '\e[1 q' ;;      # blinking block
      main|viins) echo -ne '\e[5 q' ;; # blinking beam
      *) echo -ne '\e[3 q' ;;          # blinking underline
    esac
}

# Extend (don't override) the built-in hooks to set the cursor mode.
# https://zsh.sourceforge.io/Doc/Release/User-Contributions.html
autoload -Uz add-zle-hook-widget
add-zle-hook-widget zle-line-init set-cursor-mode

# Natural text editing
# @todo can we copy some from iterm2's key mappings?
# bindkey "\e[1;3C" forward-word
# bindkey "\e[1;3D" backward-word
# bindkey "\e[[3~" forward-delete-char # @todo delete word, add forward delete

# Open tmux launcher when space is pressed in vicmd mode (like VSpaceCode).
# @todo move this to tmux-launcher.plugin.zsh and add zstyle option to configure
# key
tmux-launcher () { tmux show-action-menu-root ; }
zle -N tmux-launcher
bindkey -M vicmd " " tmux-launcher

#
# Expand aliases when pressing space. Use ctrl-space to skip expansion.
# glob-alias is defined by the editor plugin.
#
# https://github.com/rothgar/mastering-zsh/blob/master/docs/helpers/aliases.md#automatically-expand-aliases
#

setopt ALIASES # Expand aliases.
# setopt GLOB_COMPLETE # Complete globs instead of inserting them.

# # normal space during searches
# bindkey -M isearch " " magic-space

#
# Add vim key bindings for completion menus.
#
# Note: must be loaded after compinit (i.e. prezto/init.zsh)
#
# https://thevaluable.dev/zsh-install-configure-mouseless/
#

# Load complist for access to the menuselect keymap.
zmodload zsh/complist
# Toggle interactive mode
# bindkey -M menuselect '^F' vi-insert
# @todo can we just globally map these to arrow keys?
bindkey -M menuselect '^h' backward-char
bindkey -M menuselect '^j' down-line-or-history
bindkey -M menuselect '^k' up-line-or-history
bindkey -M menuselect '^l' forward-char

#
# vim-surround
#
# https://thevaluable.dev/zsh-install-configure-mouseless/
#

autoload -Uz surround

zle -N add-surround surround
zle -N change-surround surround
zle -N delete-surround surround

bindkey -M vicmd ys add-surround
bindkey -M visual S add-surround
bindkey -M vicmd cs change-surround
bindkey -M vicmd ds delete-surround

#
# zsh-bracketed
#
# https://github.com/zsh-users/zsh/blob/master/Functions/Zle/select-quoted
#

autoload -U select-quoted
zle -N select-quoted
for m in visual viopp; do
  for c in {a,i}{\',\",\`}; do
    bindkey -M $m $c select-quoted
  done
done

#
# zsh-quoted
#
# https://github.com/zsh-users/zsh/blob/master/Functions/Zle/select-bracketed
#

autoload -U select-bracketed
zle -N select-bracketed
for m in visual viopp; do
  for c in {a,i}${(s..)^:-'()[]{}<>bB'}; do
    bindkey -M $m $c select-bracketed
  done
done

# History substring search
# @todo trigger history menu or fzf?
# bindkey -M viins "$key_info[Control]K" history-substring-search-up
# bindkey -M viins "$key_info[Control]J" history-substring-search-down
bindkey -M viins "^k" up-line-or-search
bindkey -M viins "^j" down-line-or-search

# @todo history-incremental-search doesn't trigger with ^r (even with fzf
# disabled)

#
# Fun
#

# @todo tetris: https://github.com/rothgar/mastering-zsh/blob/master/docs/helpers/widgets.md

#
# ---
#

# @note Uncomment the following line to print startup time.
# zprof
